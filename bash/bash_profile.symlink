###############################################################
# This file contains machine-agnostic, bash specific settings #
###############################################################

# Temporarily suppress any 'No such file or directory' warnings
shopt -s nullglob

# Source the machine-agnostic, shell-agnostic settings
PROFILE=~/.profile
if [[ -f $PROFILE ]]; then
	source $PROFILE
fi

# Source the machine-agnostic, shell-specific settings for .dotfiles topics
for prompt_file in ~/.dotfiles/**/prompt.bash; do
	source $prompt_file
done

for completion_file in ~/.dotfiles/**/completion.bash; do
	source $completion_file
done

# Source the machine-specific, shell-agnostic settings
LOCALRC=~/.localrc
if [[ -f $LOCALRC ]]; then
	source $LOCALRC
fi

# Source the machine-specific, shell-specific settings
BASHRC=~/.bashrc
if [[ -f $BASHRC ]]; then
	source $BASHRC
fi

# Restore 'No such file or directory' warnings
shopt -u nullglob

# Correct any mistyped cd commands
shopt -s cdspell

# Update window size after every command
shopt -s checkwinsize

# Append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# This allows you to bookmark your favorite places across the file system
# Define a variable containing a path and you will be able to cd into it regardless of the directory you're in
shopt -s cdable_vars

# Examples:
# export dotfiles="$HOME/dotfiles"
# export projects="$HOME/projects"
# export documents="$HOME/Documents"
# export dropbox="$HOME/Dropbox"

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '

# Setup the prompt
__scm_ps1() {
	local s=
	if (svn info &> /dev/null); then
		s=" ($(__svn_ps1))"
	else
		# Replace the standard git-core indicators
		s=$(replace_git_ps1_indicators "$(__git_ps1 ' (%s)')")
	fi
	echo -n "$s"
}

PS1=$(echo ${PS1%\\$ })'\[\033[1;31m\]$(__scm_ps1)\[\033[0m\]$ '